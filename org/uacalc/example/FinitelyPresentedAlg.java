package org.uacalc.example;

import java.io.*;
import java.util.*;
import org.uacalc.alg.*;
import org.uacalc.alg.op.*;
import org.uacalc.terms.*;
import org.uacalc.eq.*;
import org.uacalc.io.*;

public class FinitelyPresentedAlg {

  static String algFile = "/home/ralph/Java/Algebra/algebras/m3.ua";
  static int numGens = 4;
  // This should be a generating set of alg1. Make it as small as possible.
  static OperationSymbol meet = OperationSymbol.MEET;
  static List<Equation> relations = new ArrayList<Equation>();
  static List<Variable> vars4 = new ArrayList<Variable>();
  static List<Variable> vars5;
  static List<Variable> vars6;
  
  static {
    vars4.add(Variable.x);
    vars4.add(Variable.y);
    vars4.add(Variable.z);
    vars4.add(new VariableImp("u"));
    
    vars5 = new ArrayList<Variable>(vars4);
    vars5.add(new VariableImp("v"));
    
    vars6 = new ArrayList<Variable>(vars5);
    vars6.add(new VariableImp("w"));
    
        
  }
  static List<Term> xyList = new ArrayList<Term>();
  static List<Term> uvList = new ArrayList<Term>();
  static {
    xyList.add(Variable.x);
    xyList.add(Variable.y);
    uvList.add(vars5.get(3));
    uvList.add(vars5.get(4));
    
  }
  
  static Term xy = new NonVariableTerm(meet, xyList);
  static Term uv = new NonVariableTerm(meet, uvList);
  
  public static void main(String[] args) throws IOException, BadAlgebraFileException {

    SmallAlgebra alg = org.uacalc.io.AlgebraIO.readAlgebraFile(algFile);
    //relations.add(new Equation(Variable.x, xy, vars4));  // x < y on 4
    
    relations.add(new Equation(Variable.x, xy, vars5));
    relations.add(new Equation(vars5.get(3), uv, vars5));
    
    FreeAlgebra fr = new FreeAlgebra(alg, 5, relations, null);
    System.out.println("fr size = " + fr.cardinality());
    
    
    // The third argument below is a generating set of alg1.
    //Equation eq = FreeAlgebra.findEquationOfAnotB(alg0, alg1, alg1Generators);
    //System.out.println("eq is\n" + eq);
    //if (eq != null) {  // if eq == null, alg1 is in V(alg0), 
                       // or at least the subalgebra generated by the generators is.
      // test that eq fails in alg1 (of course it does).
      //Map<Variable, Integer> failure = eq.findFailureMap(alg1);
      //System.out.println("failure in alg1\n" + failure);
      // try to find a failure in alg0 (of course there is none).
      //failure = eq.findFailureMap(alg0);
      //System.out.println("failure in alg0\n" + failure);
    //}
  }
}
