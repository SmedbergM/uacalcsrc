package org.uacalc.example;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//import org.me.mattlib.HasNUHorowitz;
import org.uacalc.alg.ProductAlgebra;
import org.uacalc.alg.SmallAlgebra;
import org.uacalc.io.BadAlgebraFileException;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Arrays;
import org.uacalc.alg.BigProductAlgebra;
import org.uacalc.util.ArrayIncrementor;
import org.uacalc.util.IntArray;
import org.uacalc.util.SequenceGenerator;
import org.uacalc.ui.tm.ProgressReport;



/**
 *
 * @author Matt
 */
public class HasKaryNU {
  
  public static void main(String[] args)
            throws IOException, BadAlgebraFileException {
        SmallAlgebra InputAlg1 = null;
        SmallAlgebra InputAlg2 = null;
        SmallAlgebra testalg = null;
        int pow = 1;
        int arity = 10;
        if (args.length > 1) arity =  Integer.parseInt(args[0]);
        if (args.length > 1) {
            InputAlg1 = (SmallAlgebra) org.uacalc.io.AlgebraIO.readAlgebraFile(args[1]);
        }
        if (args.length > 2) {
            InputAlg2 = (SmallAlgebra) org.uacalc.io.AlgebraIO.readAlgebraFile(args[2]);
            List algs = new ArrayList();
            algs.add(InputAlg1);
            algs.add(InputAlg2);
            testalg = new ProductAlgebra(algs);
        } else {
            //testalg = InputAlg1;
            testalg = (SmallAlgebra) org.uacalc.io.AlgebraIO.readAlgebraFile("/home/ralph/Java/Algebra/algebras/BA2.ua");
        }
        int result = hasNUHorowitz(testalg, arity);
        if (result == 1) {
            System.out.println("Algebra has a " + arity + "-ary NU term");
        } else if (result == 0) {
            System.out.println("Algebra has no  " + arity + "-ary NU term");
            //AlgebraIO.writeAlgebraFile(testalg, "NoMajorityTerm.ua");
        } else if (result == -1) {
            System.out.println("Algebra has no Jonsson terms");
           // AlgebraIO.writeAlgebraFile(testalg, "NoMajorityTerm.ua");
        }
    }
  

  /**
   *
   * @author Matt determines if the idempotent algebra has a near unanimity term
   * operation of the given arity by checking for local nu terms for arity sized
   * collections of tuples of length arity in the algebra.
   */


  public static int hasNUHorowitz(SmallAlgebra testalg, int arity) throws FileNotFoundException {
    int power = arity;
    int Progress = 0;
    BigProductAlgebra alg = new BigProductAlgebra(testalg, power);
    //alg.makeOperationTables();
    //System.out.println("made tables");
    final int size = testalg.cardinality();
    PrintStream console = System.out;
    ByteArrayOutputStream OutStream = new ByteArrayOutputStream();
    IntArray genvector = new IntArray(arity);
    int[] A = new int[arity];
    int[] B = new int[arity];
    int[][] G = new int[arity][arity];
    for (int i = 0; i < arity; i++) {
      A[i] = 0;
    }
    ArrayIncrementor Ainc = SequenceGenerator.sequenceIncrementor(A, size - 1);
    while (true) {
      if (Progress < A[0]) {
        System.out.println("Completed " + ((Progress++) + 1)
            + "/" + size + " of the steps");
      }
      IntArray Aarray = new IntArray(A);
      for (int i = 0; i < arity; i++) {
        B[i] = 0;
      }
      ArrayIncrementor Binc = SequenceGenerator.sequenceIncrementor(B, size - 2);
      while (true) {
        List<IntArray> gens = new ArrayList<IntArray>(arity);
        for (int j = 0; j < arity; j++) {
          for (int k = 0; k < arity; k++) {
            if (j == k) {
              if (B[j] == A[j]) {
                G[j][k] = B[j] + 1;
              } else {
                G[j][k] = B[j];
              }
            } else {
              G[j][k] = A[k];
            }
          }
          gens.add(new IntArray(G[j]));
        }
        //pipe the output from the sgClose method to a string, rather
        //than the console
        PrintStream out = new PrintStream(OutStream);
        //System.setOut(out);
        List<IntArray> sub = alg.sgClose(gens, null, Aarray, new ProgressReport());
        //out.close();
        //restore console output
        System.setOut(console);
        OutStream.reset();
        if (!sub.contains(Aarray)) {
          String Astring = Arrays.toString(A);
          System.out.println("The tuple " + Astring + " is not in the "
              + "subuniverse generated by the tuples:");
          for (int k = 0; k < arity; k++) {
            String GenString = Arrays.toString(G[k]);
            System.out.println(GenString);
          }
          System.out.println("The subuniverse is " + sub.toString());
          return 0; // will mean that there is no
          //nu term of the given arity
        }
        if (!Binc.increment()) {
          break;
        }
      }
      if (!Ainc.increment()) {
        break;
      }
    }
    return 1; //means that there is an nu term of the given arity
  }

    
}
